{"version":3,"sources":["authConfig.js","graph.js","App.jsx","index.js"],"names":["msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","graphConfig","callMsGraph","accessToken","a","headers","Headers","bearer","append","options","method","fetch","then","response","json","catch","log","ProfileContent","useMsal","instance","accounts","useState","setGraphData","useEffect","length","acquireTokenSilent","account","givenName","surname","mail","link","document","createElement","href","body","appendChild","click","MainContent","type","URLSearchParams","location","search","get","loginFunction","logoutFunction","loginRedirect","e","logoutRedirect","postLogoutRedirectUri","className","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","getElementById"],"mappings":"yQAYaA,EAAa,CACtBC,KAAM,CACFC,SAAU,uCACVC,UAAW,yEACXC,YAAa,oDAKjBC,MAAO,CACHC,cAAe,iBACfC,wBAAwB,GAE5BC,OAAQ,CACJC,cAAe,CACXC,eAAgB,SAACC,EAAOC,EAASC,GAC7B,IAAIA,EAGJ,OAAQF,GACJ,KAAKG,IAASC,MAEV,YADAC,QAAQC,MAAML,GAElB,KAAKE,IAASI,KAEV,YADAF,QAAQG,KAAKP,GAEjB,KAAKE,IAASM,QAEV,YADAJ,QAAQK,MAAMT,GAElB,KAAKE,IAASQ,QAEV,YADAN,QAAQO,KAAKX,QAcxBY,EAAe,CACxBC,OAAQ,CAAC,cAOAC,EACQ,sC,oDC3Dd,SAAeC,EAAtB,kC,4CAAO,WAA2BC,GAA3B,mBAAAC,EAAA,6DACGC,EAAU,IAAIC,QACdC,EAFH,iBAEsBJ,GAEzBE,EAAQG,OAAO,gBAAiBD,GAE1BE,EAAU,CACZC,OAAQ,MACRL,QAASA,GARV,kBAWIM,MAAMV,EAA6BQ,GACrCG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAvB,GAAK,OAAID,QAAQyB,IAAIxB,OAb7B,4C,gCCMDyB,EAAiB,WACnB,MAA+BC,cAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAClB,EAAkCC,mBAAS,MAA3C,mBAAkBC,GAAlB,WA+BAC,qBAAU,WACNhC,QAAQyB,IAAI,KACRI,EAASI,OAAS,GAClBL,EACKM,mBADL,2BAEW1B,GAFX,IAGQ2B,QAASN,EAAS,MAErBR,MAAK,SAACC,GACHX,EAAYW,EAASV,aAAaS,MAAK,SAACC,GACpCS,EAAaT,GACaA,EAASc,UAAoBd,EAASe,QAAef,EAASgB,KAAxF,IACMC,EAAOC,SAASC,cAAc,KAEpCF,EAAKG,KAAL,gEAAqEpB,EAASc,UAA9E,oBAAmGd,EAASe,QAA5G,iBAA4Hf,EAASgB,MACrIE,SAASG,KAAKC,YAAYL,GAC1BA,EAAKM,gBAItB,IAQH,OACI,8BAiBFC,EAAc,WAChB,MAA+BnB,cAAvBC,EAAR,EAAQA,SACR,GADA,EAAkBC,SACgBC,mBAAS,OAA3C,6BACAE,qBAAU,WACNhC,QAAQyB,IAAI,KACZ,IAAMsB,EAAO,IAAIC,gBAAgBC,SAASC,QAAQC,IAAI,QAEtD,GADAnD,QAAQyB,IAAI,qBACC,UAATsB,EACAK,SACG,GAAa,WAATL,EACPM,QACG,CACH,IAAMd,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAL,8CACAF,SAASG,KAAKC,YAAYL,GAC1BA,EAAKM,WAEV,IAEH,IAAMO,EAAgB,WAClBxB,EAAS0B,cAAc9C,GAAcgB,OAAM,SAAC+B,GACxCvD,QAAQyB,IAAI8B,OAIdF,EAAiB,WACnBzB,EAAS4B,eAAe,CACpBC,sBAAuB,wBAI/B,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,IAAD,UACI,cAAC,EAAD,SAmBD,SAASC,IACpB,OACI,mCAEI,cAAC,EAAD,M,ICvINC,EAAe,I,MAAIC,GAAwB7E,GAKjD8E,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAcpC,SAAUgC,EAAxB,SACI,cAAC,EAAD,QAGRpB,SAASyB,eAAe,W","file":"static/js/main.81bc5d15.chunk.js","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = {\n    auth: {\n        clientId: \"1fb1df3c-52c2-4722-9812-e2f115bbef8b\",\n        authority: \"https://login.microsoftonline.com/c12007a4-882b-4381-b05a-b783431570c7\",\n        redirectUri: \"https://nohtaekyoung.github.io/DBocAuthorization\",\n        // clientId: \"6b9c1aa6-0b49-43e0-806a-a2f4bd6d2888\",\n        // authority: \"https://login.microsoftonline.com/c12007a4-882b-4381-b05a-b783431570c7\",\n        // redirectUri: \"http://localhost:3200\",\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                }\n            },\n        },\n    },\n};\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n    scopes: [\"User.Read\"],\n};\n\n/**\n * Add here the scopes to request when obtaining an access token for MS Graph API. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\nexport const graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\",\n};\n","import { graphConfig } from \"./authConfig\";\n\n/**\n * Attaches a given access token to a MS Graph API call. Returns information about the user\n * @param accessToken \n */\nexport async function callMsGraph(accessToken) {\n    const headers = new Headers();\n    const bearer = `Bearer ${accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n","import React, { useEffect, useState } from \"react\";\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { loginRequest } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { ProfileData } from \"./components/ProfileData\";\nimport { callMsGraph } from \"./graph\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\n\n/**\n * Renders information about the signed-in user or a button to retrieve data about the user\n */\nconst ProfileContent = () => {\n    const { instance, accounts } = useMsal();\n    const [graphData, setGraphData] = useState(null);\n\n    function RequestProfileData() {\n        // Silently acquires an access token which is then attached to a request for MS Graph data\n        instance\n            .acquireTokenSilent({\n                ...loginRequest,\n                account: accounts[0],\n            })\n            .then((response) => {\n                callMsGraph(response.accessToken).then((response) => {\n                    setGraphData(response);\n                    // const link = document.createElement(\"form\");\n                    // const obj = document.createElement(\"input\");\n                    // obj.setAttribute(\"name\", \"ssoAuth\");\n                    // obj.setAttribute(\"value\", response);\n\n                    // link.appendChild(obj);\n                    // link.setAttribute(\"method\", \"post\");\n                    // link.setAttribute(\"action\", \"http://kr-dst00075.pc.cognex.com:3000/api/sso/auth\");\n                    // document.body.appendChild(link);\n                    // link.submit();\n                    const data = { givenName: response.givenName, surname: response.surname, mail: response.mail };\n                    const link = document.createElement(\"a\");\n                    // link.href = `http://kr-dst00075.pc.cognex.com:3000/api/sso/auth?givenName=${response.givenName}&surname=${response.surname}&mail=${response.mail}`;\n                    link.href = `http://kr-dst00075.pc.cognex.com:3000/login?givenName=${response.givenName}&surname=${response.surname}&mail=${response.mail}`;\n                    document.body.appendChild(link);\n                    link.click();\n                });\n            });\n    }\n    useEffect(() => {\n        console.log(\"2\");\n        if (accounts.length > 0) {\n            instance\n                .acquireTokenSilent({\n                    ...loginRequest,\n                    account: accounts[0],\n                })\n                .then((response) => {\n                    callMsGraph(response.accessToken).then((response) => {\n                        setGraphData(response);\n                        const data = { givenName: response.givenName, surname: response.surname, mail: response.mail };\n                        const link = document.createElement(\"a\");\n                        // link.href = `http://kr-dst00075.pc.cognex.com:3000/api/sso/auth?givenName=${response.givenName}&surname=${response.surname}&mail=${response.mail}`;\n                        link.href = `http://kr-dst00075.pc.cognex.com:3000/login?givenName=${response.givenName}&surname=${response.surname}&mail=${response.mail}`;\n                        document.body.appendChild(link);\n                        link.click();\n                    });\n                });\n        }\n    }, []);\n\n    const redirectCallback = () => {\n        console.log(\"Callback\");\n        if (graphData !== undefined) {\n            console.log(graphData);\n        }\n    };\n    return (\n        <>\n            {/* <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\n            {graphData ? (\n                <ProfileData graphData={graphData} />\n            ) : (\n                <Button variant=\"secondary\" onClick={RequestProfileData}>\n                    Request Profile Information\n                </Button>\n            )} */}\n        </>\n    );\n};\n\n/**\n * If a user is authenticated the ProfileContent component above is rendered. Otherwise a message indicating a user is not authenticated is rendered.\n */\n\nconst MainContent = () => {\n    const { instance, accounts } = useMsal();\n    const [graphData, setGraphData] = useState(null);\n    useEffect(() => {\n        console.log(\"1\");\n        const type = new URLSearchParams(location.search).get(\"type\");\n        console.log(\"type 확인\");\n        if (type === \"login\") {\n            loginFunction();\n        } else if (type === \"logout\") {\n            logoutFunction();\n        } else {\n            const link = document.createElement(\"a\");\n            link.href = `http://kr-dst00075.pc.cognex.com:3000/login`;\n            document.body.appendChild(link);\n            link.click();\n        }\n    }, []);\n\n    const loginFunction = () => {\n        instance.loginRedirect(loginRequest).catch((e) => {\n            console.log(e);\n        });\n    };\n\n    const logoutFunction = () => {\n        instance.logoutRedirect({\n            postLogoutRedirectUri: \"/DBocAuthorization\",\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <AuthenticatedTemplate>\n                <ProfileContent />\n            </AuthenticatedTemplate>\n\n            {/* <UnauthenticatedTemplate>\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\n            </UnauthenticatedTemplate> */}\n        </div>\n    );\n};\n\n// export const DefaultApp = () => {\n//     return (\n//         <PageLayout>\n//             <MainContent />\n//             <Outlet />\n//         </PageLayout>\n//     );\n// };\n\nexport default function App() {\n    return (\n        <>\n            {/* <PageLayout> */}\n            <MainContent />\n            {/* </PageLayout> */}\n        </>\n    );\n}\n\n// export default function App() {\n//     return (\n//         <>\n//             <BrowserRouter basename={process.env.PUBLIC_URL}>\n//                 <Routes>\n//                     <Route path=\"/\" element={<DefaultApp />}>\n//                         <Route path=\"login\" element={<Login />}></Route>\n//                         <Route path=\"logout\" element={<Logout />}></Route>\n//                     </Route>\n//                 </Routes>\n//             </BrowserRouter>\n//         </>\n//     );\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\nimport App from \"./App.jsx\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { msalConfig } from \"./authConfig\";\n\n/**\n * Initialize a PublicClientApplication instance which is provided to the MsalProvider component\n * We recommend initializing this outside of your root component to ensure it is not re-initialized on re-renders\n */\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n/**\n * We recommend wrapping most or all of your components in the MsalProvider component. It's best to render the MsalProvider as close to the root as possible.\n */\nReactDOM.render(\n    <React.StrictMode>\n        <MsalProvider instance={msalInstance}>\n            <App />\n        </MsalProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}